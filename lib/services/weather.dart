import 'package:clima/screens/location.dart';
import 'package:clima/services/networking.dart';

const apiKey = 'aede869765fab32e916b3f86f78ba1be';
const openWeatherMapURL = 'https://api.openweathermap.org/data/2.5/weather';

class WeatherModel {
  //–ø–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É –ø–æ –∑–∞–ø—Ä–æ—Å—É –≥–æ—Ä–æ–¥–∞
  Future getCityWeather(cityName) async {
    var url = '$openWeatherMapURL?q=$cityName&appid=$apiKey&units=metric';
    NetworkHelper networkHelper = NetworkHelper(url);
    var weatherData = await networkHelper.getData();
    print(weatherData);
    //print(weatherData['coord']);
    return weatherData;
  }

  //—É–∑–Ω–∞–µ–º –ø–æ–≥–æ–¥—É –ø–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é
  Future<dynamic> getLocationWeather() async {
    Location location = Location();
    //–ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
    await location.getCurrentLocation();
    //—Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –Ω—É–∂–Ω—ã–º url
    NetworkHelper networkHelper = NetworkHelper(
        '$openWeatherMapURL?lat=${location.latitude}&lon=${location.longitude}&exclude=minutely,hourly,daily,alerts&appid=$apiKey&units=metric');
    //–ø–æ–ª—É—á–∞–µ–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç –≤ json
    var weatherData = await networkHelper.getData();
    return weatherData;
  }

  String getWeatherIcon(int condition) {
    if (condition < 300) {
      return 'üå©';
    } else if (condition < 400) {
      return 'üåß';
    } else if (condition < 600) {
      return '‚òîÔ∏è';
    } else if (condition < 700) {
      return '‚òÉÔ∏è';
    } else if (condition < 800) {
      return 'üå´';
    } else if (condition == 800) {
      return '‚òÄÔ∏è';
    } else if (condition <= 804) {
      return '‚òÅÔ∏è';
    } else {
      return 'ü§∑‚Äç';
    }
  }

  String getMessage(int temp) {
    if (temp > 25) {
      return 'It\'s üç¶ time';
    } else if (temp > 20) {
      return 'Time for shorts and üëï';
    } else if (temp < 10) {
      return 'You\'ll need üß£ and üß§';
    } else {
      return 'Bring a üß• just in case';
    }
  }
}
